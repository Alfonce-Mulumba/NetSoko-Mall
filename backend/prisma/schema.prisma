generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int               @id @default(autoincrement())
  email                  String            @unique
  phone                  String?           @unique
  password               String
  role                   String            @default("customer")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  is_verified            Boolean           @default(false)
  name                   String
  verification_code      Int?
  verification_expires   DateTime?
  reset_password_expires DateTime?
  reset_password_token   String?
  cart                   Cart[]
  complaint              Complaint[]
  deliveryAddress        DeliveryAddress[]
  orders                 Order[]
  reviews                Review[] // user's reviews (optional relation)
}

model Product {
  id               Int            @id @default(autoincrement())
  name             String
  description      String
  shortDescription String?
  longDescription  String?
  price            Float
  discountedPrice  Float? // optional explicit discounted price
  stock            Int            @default(0) // total stock (fallback)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  category         String?
  hot              Boolean        @default(false)
  discount         Int? // percentage discount (optional)
  cart             Cart[]
  orderItems       OrderItem[]
  images           ProductImage[]
  // sizes are stored in ProductSize for per-size stock, keep that model for inventory control
  sizes            ProductSize[]
  // quick frontend-friendly arrays
  colors           String[] // e.g. ["#000000","Red","Blue"]
  sku              String?
  reviews          Review[] // relation to reviews
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  size      String
  stock     Int     @default(0)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  colorId   Int?
  sizeId    Int?
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  // ✅ Compound unique for upsert
  @@unique([userId, productId, colorId, sizeId], name: "user_product_color_size_unique")
}

model DeliveryAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  address   String
  city      String
  country   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Order {
  id                Int              @id @default(autoincrement())
  userId            Int
  status            String           @default("pending")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deliveryAddressId Int?
  deliveryAddress   DeliveryAddress? @relation(fields: [deliveryAddressId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  // persist selected attributes with the order item
  color     String?
  size      String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Complaint {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  status    String   @default("open")
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int? // optional (allow anonymous if you choose — but protect routes accordingly)
  userName  String? // fallback display name
  rating    Int // 1..5 (validate in server)
  comment   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}
